pipeline {
  agent any
  
  environment {
    AWS_REGION = 'ap-south-1'
  }
  
  stages {
    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/saimanohar9966/terraform-workspace.git']]
        ])
      }
    }
    
    stage('Terraform Init') {
      steps {
        withCredentials([
          amazonWebServicesCredentials(credentialsId: 'sai', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')
        ]) {
          script {
            def workspace = params.ENVIRONMENT
            dir(workspace) {
              sh "terraform workspace select ${workspace}"
              sh "terraform init -no-color"
            }
          }
        }
      }
    }
    
    stage('Create Terraform Workspace') {
      steps {
        script {
          def workspace = params.ENVIRONMENT
          def workspaceExists = sh(script: "terraform workspace list -no-color | grep -wq ${workspace}", returnStatus: true)
          
          if (workspaceExists != 0) {
            sh "terraform workspace new ${workspace} -no-color"
          }
        }
      }
    }
    
    stage('Terraform Plan') {
      steps {
        withCredentials([
          amazonWebServicesCredentials(credentialsId: 'sai', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')
        ]) {
          script {
            def workspace = params.ENVIRONMENT
            dir(workspace) {
              sh "terraform plan -no-color"
            }
          }
        }
      }
    }
    
    stage('Terraform Apply') {
      steps {
        withCredentials([
          amazonWebServicesCredentials(credentialsId: 'sai', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')
        ]) {
          script {
            def workspace = params.ENVIRONMENT
            dir(workspace) {
              sh "terraform apply -no-color"
            }
          }
        }
      }
    }
  }
}
